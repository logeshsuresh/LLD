Splitwise LLD

Users can add/edit/delete/settle expenses.

People need to be added to a group.

2 types of people we will have to a group - +ve balance who will receive money, -ve balance who will pay money

Each user should be mapped to their respective balance

Need to settle the expense in the optimal way possible - with minimal txn’s be done

4 guys

f1, f2, f3, f4 => totalAmount = Rs. 1000 / 4 => Rs. 250

you = paid elec. bill = split equal

f2 = 250 to f1
f3 = 250 to f1
f4 = 250 to f1

some txn’s
f2 = 370 to f1
f3 = 880 to f1

f2 to f1 owes = 620
f3 to f1 owes = 1130
f4 to f1 owes = 250

go out f4 pays and split equal

f1 owes f4 = 480 (coz of one of your friend)
f2 owes f4 = 240
f3 owes f4 = 240

User1 owes User4: 230 (250-480) User2 owes User1: 620 (620+0) User2 owes User4: 240 (0+240) User3 owes User1: 1130 (1130+0) User3 owes User4: 240 (0+240)

## Requirements :-

* User
* Group (name, List<Expense>, settle)
* Expenses (name) -> should contain who paid for the expense, who all are owed in the expense -> CRUD for the expenses

User belongs to a Group -> Group contains list of users
Expense belongs to a Group -> Group contains list of expenses

class User {
    String name;
}

class Expense {
    Double amount;
    User userPaid;
    Map<User, Double> amountToBePaidByUser;

    Expense() {}

    // CRUD
    createExpense(User userPaid, List<Users> usersInvoledInTxn) {

        return expense;
    }

    editExpense() {
    }

    deleteExpense() {
    }

}

Expense -> Group (createExpense) -> internally create an expense object, it should modify existing Group state ()

class Group {
    String name;
    List<User> users;
    List<Expense> expenses;

    addUserToGroup(User user) {
        this.users.add(user);
    }

    addExpense(Expense expense) {
       this.expenses.add(expense);
    }

}

class SimplifyExpense {

    Group group;

    Map<User, Double> simplifiedExpense; // user -> double (+ve or -ve)

    showBalances(User user) {
        Double amount = 0;
        for (Expense expense : group.expenses) {
            if (expense.userPaid) {
                // iterate through the map
                for (User userToPay : expense.amountToBePaidByUser.keySet()) {
                    amount += expense.amountToBePaidByUser.get(userToPay);
                }
             } else {
             }
        }
    }

    simplifyBalance() {
        for (Expense expense : group.expenses) {
            User userWhoPaid = expense.userWhoPaid;
            Double amountPRevOwed = simplifiedExpense.get(userWhoPaid);
            Double totalAmountOwed = 0;
            for (User userToPay : expense.amountToBePaidByUser()) {
                totalAmountOwed += expense.amountToBePaidByUser.get(userToPay);
                Double prevAmount = simplifiedExpense.get(userToPay); // if not present 0
                simplifiedExpense.put(userToPay, prevAmount - expense.amountToBePaidByUser.get(userToPay));
            }
            simplifiedExpense.put(userWhoPaid, totalAmountOwed + amountPrevOwed);
        }
    }
}




